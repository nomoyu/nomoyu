package {{ .Context }}

import (
	"strconv"

	"github.com/gin-gonic/gin"
	"github.com/nomoyu/go-gin-framework/nomoyu"
	"github.com/nomoyu/go-gin-framework/pkg/errorcode"
	"github.com/nomoyu/go-gin-framework/pkg/response"

	app "{{ .Module }}/internal/application/{{ .Context }}"
	"{{ .Module }}/internal/infrastructure/persistence"
)

type Handler struct {
	svc app.Service
}

func NewHandler(svc app.Service) *Handler { return &Handler{svc: svc} }

// Routes 挂载 {{ .Context }} 相关路由
func Routes() nomoyu.RouteGroup {
	// 简化：内部自行装配（也可以在 boot 里注册对象池后从池取）
	repo := persistence.New{{ .ContextP }}GormRepo()
	h := NewHandler(app.New(repo))

	return nomoyu.NewGroup("/api/{{ .Context }}").
		POST("/", h.Create).
		GET("/:id", h.Get)
}

// ---------- 文档用 DTO ----------

// createReq 创建请求体
type createReq struct {
	Name string `json:"name" binding:"required" example:"Tom"`
}

// {{ .ContextP }}VO 用于文档展示的返回体
type {{ .ContextP }}VO struct {
	ID   uint64 `json:"id"   example:"1"`
	Name string `json:"name" example:"Tom"`
}

// Create godoc
// @Summary      创建{{ .ContextP }}
// @Description  新增一个{{ .ContextP }}并返回创建结果
// @Tags         {{ .ContextP }}
// @Accept       json
// @Produce      json
// @Param        body  body      createReq  true  "创建{{ .ContextP }}请求体"
// @Success      200   {object}  response.Response{data={{ .ContextP }}VO}  "成功"
// @Failure      400   {object}  response.Response  "参数不合法"
// @Failure      500   {object}  response.Response  "服务器错误"
// @Router       /api/{{ .Context }} [post]
func (h *Handler) Create(c *gin.Context) {
	var req createReq
	if err := c.ShouldBindJSON(&req); err != nil {
		response.FailWithCode(c, errorcode.InvalidParams)
		return
	}
	e, err := h.svc.Create(req.Name)
	if err != nil {
		response.FailWithCode(c, errorcode.ServerError)
		return
	}
	// 若 e 为领域实体，这里建议转为 VO
	out := {{ .ContextP }}VO{ID: e.ID, Name: e.Name}
	response.Success(c, out)
}

// Get godoc
// @Summary      获取{{ .ContextP }}详情
// @Description  根据 ID 查询{{ .ContextP }}详情
// @Tags         {{ .ContextP }}
// @Produce      json
// @Param        id   path      int  true  "{{ .ContextP }}ID"
// @Success      200  {object}  response.Response{data={{ .ContextP }}VO}  "成功"
// @Failure      404  {object}  response.Response  "未找到"
// @Failure      400  {object}  response.Response  "参数错误"
// @Router       /api/{{ .Context }}/{id} [get]
func (h *Handler) Get(c *gin.Context) {
	id, err := strconv.ParseUint(c.Param("id"), 10, 64)
	if err != nil {
		response.FailWithCode(c, errorcode.InvalidParams)
		return
	}
	e, err := h.svc.Get(id)
	if err != nil {
		response.NotFound(c, "not found")
		return
	}
	out := {{ .ContextP }}VO{ID: e.ID, Name: e.Name}
	response.Success(c, out)
}

// Update godoc
// @Summary      更新{{ .ContextP }}
// @Description  根据 ID 更新 {{ .ContextP }} 基本信息
// @Tags         {{ .ContextP }}
// @Accept       json
// @Produce      json
// @Param        id    path      int        true  "{{ .ContextP }}ID"
// @Param        body  body      updateReq  true  "更新请求体"
// @Success      200   {object}  response.Response
// @Failure      400   {object}  response.Response
// @Failure      404   {object}  response.Response
// @Router       /api/{{ .Context }}/{id} [put]
func (h *Handler) Update(c *gin.Context) {
	id, err := strconv.ParseUint(c.Param("id"), 10, 64)
	if err != nil {
		response.FailWithCode(c, errorcode.InvalidParams)
		return
	}
	var req createReq
	if err := c.ShouldBindJSON(&req); err != nil {
		response.FailWithCode(c, errorcode.InvalidParams)
		return
	}
	e, err := h.svc.Update(id, req.Name)
	if err != nil {
		response.FailWithCode(c, errorcode.ServerError)
		return
	}
	response.Success(c, e)
}

// Delete godoc
// @Summary      删除{{ .ContextP }}
// @Description  根据 ID 删除（软删除）{{ .ContextP }}
// @Tags         {{ .ContextP }}
// @Produce      json
// @Param        id   path      int  true  "{{ .ContextP }}ID"
// @Success      200  {object}  response.Response
// @Failure      404  {object}  response.Response
// @Router       /api/{{ .Context }}/{id} [delete]
func (h *Handler) Delete(c *gin.Context) {
	id, err := strconv.ParseUint(c.Param("id"), 10, 64)
	if err != nil {
		response.FailWithCode(c, errorcode.InvalidParams)
		return
	}
	if err := h.svc.Delete(id); err != nil {
		response.NotFound(c, "not found")
		return
	}
	response.Success(c, "OK")
}
